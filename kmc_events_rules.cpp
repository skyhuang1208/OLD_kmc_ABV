#include <cstdio>
#include <iostream>
#include <cmath>
#include "kmc_system.h"
#include "kmc_events.h"

using namespace std;

double class_events::cal_energy(int *states_ce, int xlo, int xhi, int ylo, int yhi, int zlo, int zhi){ // use Ising model for 1st and 2nd neighbors
	// Reproduce PRB 84, 104117 (2011)
	// a probability map will first generated by calculating all possible moves
	// then randomly picked the ACTUAL move based on the probability map
	
	if(xlo>xhi || ylo>yhi || zlo>zhi) error(2, "(cal_energy) boundary error");

	int sum_k1=0, sum_j1=0, sum_u1=0;
	int sum_k2=0, sum_j2=0, sum_u2=0;
	for(int i=xlo; i<=xhi; i ++){
		for(int j=ylo; j<=yhi; j ++){
			for(int k=zlo; k<=zhi; k ++){
				int xi= pbc(i, nx);
				int yi= pbc(j, ny);
				int zi= pbc(k, nz);

				int state_i= *(states_ce + xi*ny*nz + yi*nz + zi);
				if(0==state_i) continue;

				for(int a=0; a<n1nbr; a ++){ // 1st neighbors
					int xj= pbc(xi+(*(v1nbr+a))[0], nx);
					int yj= pbc(yi+(*(v1nbr+a))[1], ny);
					int zj= pbc(zi+(*(v1nbr+a))[2], nz);

					int state_j1= *(states_ce + xj*ny*nz + yj*nz + zj);
					if(0==state_j1) continue;

					// calculating the energy for ABV system. If it's not ABV system, please modify it; also, e2nbr below 
					sum_k1 ++;			// i**2+j**2= 1
					sum_j1 += (state_i * state_j1); // i*j
					sum_u1 += (state_i + state_j1); // i**2*j+i*j**2= j+i
				}
				
				if(! is_e2nbr) continue;

				for(int b=0; b<n2nbr; b ++){ // 2nd neighbors
					int xj= pbc(xi+(*(v2nbr+b))[0], nx);
					int yj= pbc(yi+(*(v2nbr+b))[1], ny);
					int zj= pbc(zi+(*(v2nbr+b))[2], nz);

					int state_j2= *(states_ce + xj*ny*nz + yj*nz + zj);
					if(0==state_j2) continue;

					// e2nbr version of Ising model formulation
					sum_k2 ++;
					sum_j2 += (state_i * state_j2); 
					sum_u2 += (state_i + state_j2);
				}
	}}}

	double sum_energy = (cons_k1*sum_k1 + cons_j1*sum_j1 + cons_u1*sum_u1) + (cons_k2*sum_k2 + cons_j2*sum_j2 + cons_u2*sum_u2);
	return sum_energy;
}

void class_events::rules_recb(int &typev, int &typei){
	if(typev !=0 || typei >=0)	error(2, "(rules_recb) wrong types-- ", 2, typev, typei);

//	switch(typei){
//		case -1:
//		case -2:
//		case -3:
//		case -4:
//	}
}

void class_events::rules_int_jump(int &typei, int &typea){
	if(typei >=0 || typea <=0)	error(2, "(rules_int_jump) wrong types-- ", 2, typei, typea);

//	switch(){
//		case -1:
//		case -2:
//		case -3:
//		case -4:
//	}
	
}
